{"ast":null,"code":"import _objectSpread from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { TODO_ADD, TODO_SELECT, TODO_UPDATE, TODO_DELETE, TODO_COMPLETE } from \"./actionTypes\";\nimport { postTaskServer, updateTaskServer, deleteTaskServer } from \"../ServerCall\";\n\nconst newTask = () => {\n  return {\n    title: \"New task...\",\n    status: \"new\",\n    body: \"Add notes...\"\n  };\n};\n\nexport function postNewTaskR(items) {\n  console.log('redux fetch new');\n  return {\n    type: TODO_ADD,\n    payload: items\n  };\n}\nexport function addTaskR(items) {\n  console.log('redux add');\n  return function (dispatch) {\n    return postTaskServer(newTask()).then(item => dispatch(postNewTaskR([...items, item])));\n  };\n}\nexport function selectTaskR(item) {\n  // console.log('redux select');   \n  return {\n    type: TODO_SELECT,\n    payload: item\n  };\n}\nexport function updateTaskR(items, item, title, body) {\n  // console.log('redux update'); \n  let copyOfItem = _objectSpread({}, item);\n\n  if (title !== undefined) {\n    copyOfItem.title = title;\n  }\n\n  if (body !== undefined) {\n    copyOfItem.body = body;\n  }\n\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\n  updateTaskServer(copyOfItem);\n  let nextItems = [...items];\n  return {\n    type: TODO_UPDATE,\n    payload: nextItems\n  };\n}\nexport function deleteTaskR(items, item) {\n  // console.log('redux delete'); \n  let nextItems = items.filter(i => i._id !== item._id);\n  deleteTaskServer(item);\n  return {\n    type: TODO_DELETE,\n    payload: nextItems\n  };\n}\nexport function completeTaskR(items, item) {\n  // console.log('redux complete');   \n  let copyOfItem = _objectSpread({}, item);\n\n  copyOfItem.status = \"completed\";\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\n  updateTaskServer(copyOfItem);\n  let nextItems = [...items];\n  return {\n    type: TODO_COMPLETE,\n    payload: nextItems\n  };\n}","map":{"version":3,"sources":["C:/TodoApp/src/redux/actions.js"],"names":["TODO_ADD","TODO_SELECT","TODO_UPDATE","TODO_DELETE","TODO_COMPLETE","postTaskServer","updateTaskServer","deleteTaskServer","newTask","title","status","body","postNewTaskR","items","console","log","type","payload","addTaskR","dispatch","then","item","selectTaskR","updateTaskR","copyOfItem","undefined","findIndex","obj","_id","nextItems","deleteTaskR","filter","i","completeTaskR"],"mappings":"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","sourcesContent":["import { TODO_ADD, TODO_SELECT, TODO_UPDATE, TODO_DELETE, TODO_COMPLETE } from \"./actionTypes\";\r\nimport {\r\n  postTaskServer,\r\n  updateTaskServer,\r\n  deleteTaskServer,\r\n} from \"../ServerCall\";\r\n\r\nconst newTask = () => {\r\n  return {\r\n    title: \"New task...\",\r\n    status: \"new\",\r\n    body: \"Add notes...\"\r\n  };\r\n};\r\n\r\nexport function postNewTaskR(items) {\r\n  console.log('redux fetch new');  \r\n  return {type: TODO_ADD, payload: items};\r\n}\r\n\r\nexport function addTaskR(items) {\r\n  console.log('redux add'); \r\n  return function (dispatch) {\r\n    return postTaskServer(newTask()).then(item => dispatch(postNewTaskR([...items, item])));\r\n  } \r\n}\r\n\r\nexport function selectTaskR(item) {\r\n  // console.log('redux select');   \r\n  return {type: TODO_SELECT, payload: item}\r\n  }\r\n\r\nexport function updateTaskR(items, item, title, body) {\r\n  // console.log('redux update'); \r\n  let copyOfItem = { ...item };\r\n  if (title !== undefined) {\r\n    copyOfItem.title = title;\r\n  }\r\n  if (body !== undefined) {\r\n    copyOfItem.body = body;\r\n  }\r\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\r\n  updateTaskServer(copyOfItem);\r\n  let nextItems = [...items];  \r\n  return {type: TODO_UPDATE, payload: nextItems};\r\n  }\r\n\r\nexport function deleteTaskR(items, item) {\r\n  // console.log('redux delete'); \r\n  let nextItems = items.filter(i => i._id !== item._id);\r\n  deleteTaskServer(item);\r\n  return {type: TODO_DELETE, payload: nextItems}\r\n  }\r\n\r\nexport function completeTaskR(items, item) {\r\n  // console.log('redux complete');   \r\n  let copyOfItem = { ...item };\r\n  copyOfItem.status = \"completed\";\r\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\r\n  updateTaskServer(copyOfItem);\r\n  let nextItems = [...items];\r\n  return {type: TODO_COMPLETE, payload: nextItems}\r\n  }"]},"metadata":{},"sourceType":"module"}
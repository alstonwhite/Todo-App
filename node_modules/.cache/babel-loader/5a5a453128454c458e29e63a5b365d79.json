{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { getTasksServer } from \"./ServerCall\";\nimport { updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem } from './state';\nconst initState = {\n  items: [{\n    id: 1,\n    title: \"New task...\",\n    status: \"new\",\n    body: \"Add notes...\"\n  }],\n  //getTasksServer().then(tasks =>\n  activeItem: [] // todos[0]\n\n};\nconst TODO_ADD = 'TODO_ADD';\nconst TODO_SELECT = 'TODO_SELECT';\nconst TODO_UPDATE = 'TODO_UPDATE';\nconst TODO_DELETE = 'TODO_DELETE';\nconst TODO_COMPLETE = 'TODO_COMPLETE'; // to replace functions in App.js (?)\n\nexport function addTask() {\n  return _addTask.apply(this, arguments);\n}\n\nfunction _addTask() {\n  _addTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            type: TODO_ADD\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _addTask.apply(this, arguments);\n}\n\nexport function selectTask(item) {\n  return {\n    type: TODO_ADD,\n    payload: item\n  };\n}\nexport function updateTask(item, title, body) {\n  return {\n    type: TODO_UPDATE,\n    payload: {\n      item,\n      title,\n      body\n    }\n  };\n}\nexport function deleteTask(item) {\n  return {\n    type: TODO_DELETE,\n    payload: item\n  };\n}\nexport function completeTask() {\n  return {\n    type: TODO_COMPLETE\n  };\n} // needs to be async function w/ await for each case? -- use Thunk\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case TODO_ADD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: addTaskItem(state.items)\n      });\n\n    case TODO_SELECT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeTodo: action.payload\n      });\n\n    case TODO_UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: updateTaskItem(state.items, state.activeItem, action.payload.title, action.payload.body)\n      });\n\n    case TODO_DELETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: deleteTaskItem(state.items, state.activeItem)\n      });\n\n    case TODO_COMPLETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: completeTaskItem(state.items, state.activeItem)\n      });\n\n    default:\n      return state;\n  }\n\n  ;\n}); // alternately (redux toolkit) -- \n// const addTodo = createAction('TODO_ADD')\n// const deleteTodo = createAction('TODO_DELETE')\n// etc\n// const todoList = createReducer(initState, {\n//   [addTodo]: state => ({...state, todos: addTaskItem(state.items)}),\n//   [deleteTodo]: state => ({...state, todos: deleteTaskItem(state.items, state.activeItem)}),\n//   etc\n// })","map":{"version":3,"sources":["C:/TodoApp/src/reducers.js"],"names":["getTasksServer","updateTaskItem","addTaskItem","deleteTaskItem","completeTaskItem","initState","items","id","title","status","body","activeItem","TODO_ADD","TODO_SELECT","TODO_UPDATE","TODO_DELETE","TODO_COMPLETE","addTask","type","selectTask","item","payload","updateTask","deleteTask","completeTask","state","action","todos","activeTodo"],"mappings":";;;AAAA,SAAQA,cAAR,QAA6B,cAA7B;AACA,SAAQC,cAAR,EAAwBC,WAAxB,EAAqCC,cAArC,EAAqDC,gBAArD,QAA4E,SAA5E;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AACAC,IAAAA,KAAK,EAAE,aADP;AAEAC,IAAAA,MAAM,EAAE,KAFR;AAGAC,IAAAA,IAAI,EAAE;AAHN,GADG,CADO;AAOd;AACAC,EAAAA,UAAU,EAAE,EARE,CASd;;AATc,CAAlB;AAYA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB,C,CAEA;;AACA,gBAAsBC,OAAtB;AAAA;AAAA;;;sEAAO;AAAA;AAAA;AAAA;AAAA,2CACI;AAACC,YAAAA,IAAI,EAAEN;AAAP,WADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIP,OAAO,SAASO,UAAT,CAAoBC,IAApB,EAA0B;AAC7B,SAAO;AAACF,IAAAA,IAAI,EAAEN,QAAP;AAAiBS,IAAAA,OAAO,EAAED;AAA1B,GAAP;AACD;AAEH,OAAO,SAASE,UAAT,CAAoBF,IAApB,EAA0BZ,KAA1B,EAAiCE,IAAjC,EAAuC;AAC1C,SAAO;AAACQ,IAAAA,IAAI,EAAEJ,WAAP;AAAoBO,IAAAA,OAAO,EAAE;AAACD,MAAAA,IAAD;AAAOZ,MAAAA,KAAP;AAAcE,MAAAA;AAAd;AAA7B,GAAP;AACD;AAEH,OAAO,SAASa,UAAT,CAAoBH,IAApB,EAA0B;AAC7B,SAAO;AAACF,IAAAA,IAAI,EAAEH,WAAP;AAAoBM,IAAAA,OAAO,EAAED;AAA7B,GAAP;AACD;AAEH,OAAO,SAASI,YAAT,GAAwB;AAC3B,SAAO;AAACN,IAAAA,IAAI,EAAEF;AAAP,GAAP;AACD,C,CAEH;;AACA,gBAAe,CAACS,KAAK,GAAGpB,SAAT,EAAoBqB,MAApB,KAA+B;AAC1C,UAAQA,MAAM,CAACR,IAAf;AACI,SAAKN,QAAL;AACI,6CAAWa,KAAX;AAAkBE,QAAAA,KAAK,EAAEzB,WAAW,CAACuB,KAAK,CAACnB,KAAP;AAApC;;AACJ,SAAKO,WAAL;AACI,6CAAWY,KAAX;AAAkBG,QAAAA,UAAU,EAAEF,MAAM,CAACL;AAArC;;AACJ,SAAKP,WAAL;AACI,6CAAWW,KAAX;AAAkBE,QAAAA,KAAK,EAAE1B,cAAc,CAACwB,KAAK,CAACnB,KAAP,EAAcmB,KAAK,CAACd,UAApB,EAAgCe,MAAM,CAACL,OAAP,CAAeb,KAA/C,EAAsDkB,MAAM,CAACL,OAAP,CAAeX,IAArE;AAAvC;;AACJ,SAAKK,WAAL;AACI,6CAAWU,KAAX;AAAkBE,QAAAA,KAAK,EAAExB,cAAc,CAACsB,KAAK,CAACnB,KAAP,EAAcmB,KAAK,CAACd,UAApB;AAAvC;;AACJ,SAAKK,aAAL;AACI,6CAAWS,KAAX;AAAkBE,QAAAA,KAAK,EAAEvB,gBAAgB,CAACqB,KAAK,CAACnB,KAAP,EAAcmB,KAAK,CAACd,UAApB;AAAzC;;AACJ;AACI,aAAOc,KAAP;AAZR;;AAaC;AACJ,CAfD,E,CAiBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import {getTasksServer} from \"./ServerCall\";\r\nimport {updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem} from './state';\r\n\r\nconst initState = {\r\n    items: [\r\n        {id: 1, \r\n        title: \"New task...\",\r\n        status: \"new\",\r\n        body: \"Add notes...\"}\r\n    ],\r\n    //getTasksServer().then(tasks =>\r\n    activeItem: []\r\n    // todos[0]\r\n}\r\n\r\nconst TODO_ADD = 'TODO_ADD';\r\nconst TODO_SELECT = 'TODO_SELECT'\r\nconst TODO_UPDATE = 'TODO_UPDATE';\r\nconst TODO_DELETE = 'TODO_DELETE';\r\nconst TODO_COMPLETE = 'TODO_COMPLETE';\r\n\r\n// to replace functions in App.js (?)\r\nexport async function addTask() {\r\n    return {type: TODO_ADD};\r\n}\r\n\r\nexport function selectTask(item) {\r\n    return {type: TODO_ADD, payload: item}\r\n  }\r\n\r\nexport function updateTask(item, title, body) {\r\n    return {type: TODO_UPDATE, payload: {item, title, body}};\r\n  }\r\n\r\nexport function deleteTask(item) {\r\n    return {type: TODO_DELETE, payload: item}\r\n  }\r\n\r\nexport function completeTask() {\r\n    return {type: TODO_COMPLETE}\r\n  }\r\n\r\n// needs to be async function w/ await for each case? -- use Thunk\r\nexport default (state = initState, action) => {\r\n    switch (action.type){\r\n        case TODO_ADD:\r\n            return {...state, todos: addTaskItem(state.items)}\r\n        case TODO_SELECT:\r\n            return {...state, activeTodo: action.payload}\r\n        case TODO_UPDATE:\r\n            return {...state, todos: updateTaskItem(state.items, state.activeItem, action.payload.title, action.payload.body)};\r\n        case TODO_DELETE:\r\n            return {...state, todos: deleteTaskItem(state.items, state.activeItem)};\r\n        case TODO_COMPLETE:\r\n            return {...state, todos: completeTaskItem(state.items, state.activeItem)};\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n// alternately (redux toolkit) -- \r\n// const addTodo = createAction('TODO_ADD')\r\n// const deleteTodo = createAction('TODO_DELETE')\r\n// etc\r\n\r\n// const todoList = createReducer(initState, {\r\n//   [addTodo]: state => ({...state, todos: addTaskItem(state.items)}),\r\n//   [deleteTodo]: state => ({...state, todos: deleteTaskItem(state.items, state.activeItem)}),\r\n//   etc\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}
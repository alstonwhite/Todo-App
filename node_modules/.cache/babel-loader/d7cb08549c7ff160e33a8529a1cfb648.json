{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\TodoApp\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./styles.css\";\nimport store from './store';\nimport TodoList from \"./components/TodoList\";\nimport TodoDetail from \"./components/TodoDetail\";\nimport { getTasksServer } from \"./ServerCall\";\nimport { updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem } from './state'; // const items = useSelector(state => state.todos);\n// const activeItem = useSelector(state => state.activeTodo);\n// const dispatch = useDispatch();\n// swap dispatch(actionCreatorFx) for each onChange handler prop\n\nexport default function App() {\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        items = _useState2[0],\n        setItems = _useState2[1];\n\n  const _useState3 = useState(undefined),\n        _useState4 = _slicedToArray(_useState3, 2),\n        activeItem = _useState4[0],\n        setActiveItem = _useState4[1];\n\n  const state = store.getState();\n\n  function addTask() {\n    return _addTask.apply(this, arguments);\n  }\n\n  function _addTask() {\n    _addTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var nextItems;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addTaskItem(items);\n\n          case 2:\n            nextItems = _context.sent;\n            setItems(nextItems); // add redux dispatch functions in here, but refactor so not double-calling server\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _addTask.apply(this, arguments);\n  }\n\n  function selectTask(item) {\n    setActiveItem(item);\n  }\n\n  function updateTask(item, title, body) {\n    const nextItems = updateTaskItem(items, item, title, body);\n    setActiveItem(nextItems.find(obj => obj._id === item._id));\n    setItems(nextItems);\n  }\n\n  function deleteTask(item) {\n    const nextItems = deleteTaskItem(items, item);\n    setItems(nextItems);\n    setActiveItem(nextItems[0]);\n  }\n\n  function completeTask(item) {\n    const nextItems = completeTaskItem(items, item);\n    setItems(nextItems);\n  }\n\n  useEffect(() => {\n    getTasksServer().then(tasks => {\n      setItems(tasks);\n      setActiveItem(tasks[0]);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    items: items,\n    onAdd: addTask,\n    onSelect: selectTask,\n    onDelete: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TodoDetail, {\n    active: activeItem,\n    onUpdateTask: updateTask,\n    onComplete: completeTask,\n    onDelete: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/TodoApp/src/App.js"],"names":["React","useState","useEffect","useSelector","useDispatch","store","TodoList","TodoDetail","getTasksServer","updateTaskItem","addTaskItem","deleteTaskItem","completeTaskItem","App","undefined","items","setItems","activeItem","setActiveItem","state","getState","addTask","nextItems","selectTask","item","updateTask","title","body","find","obj","_id","deleteTask","completeTask","then","tasks"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport \"./styles.css\";\n\nimport store from './store'\nimport TodoList from \"./components/TodoList\";\nimport TodoDetail from \"./components/TodoDetail\";\nimport {getTasksServer} from \"./ServerCall\";\nimport {updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem} from './state';\n\n// const items = useSelector(state => state.todos);\n// const activeItem = useSelector(state => state.activeTodo);\n// const dispatch = useDispatch();\n\n// swap dispatch(actionCreatorFx) for each onChange handler prop\n\nexport default function App() {\n  const [items, setItems] = useState(undefined);\n  const [activeItem, setActiveItem] = useState(undefined);\n  const state = store.getState();\n\n  async function addTask() {\n    const nextItems = await addTaskItem(items);\n    setItems(nextItems);\n    // add redux dispatch functions in here, but refactor so not double-calling server\n  }\n\n  function selectTask(item) {\n    setActiveItem(item);\n  }\n\n  function updateTask(item, title, body) {\n    const nextItems = updateTaskItem(items, item, title, body);\n    setActiveItem(nextItems.find(obj => obj._id === item._id));\n    setItems(nextItems);\n  }\n\n  function deleteTask(item) {\n    const nextItems = deleteTaskItem(items, item);\n    setItems(nextItems);\n    setActiveItem(nextItems[0]);\n  }\n\n  function completeTask(item) {\n    const nextItems = completeTaskItem(items, item)\n    setItems(nextItems);\n  }\n\n  useEffect(() => {\n      getTasksServer().then(tasks => {\n        setItems(tasks);\n        setActiveItem(tasks[0]);\n      });\n    }, []);\n\n  return (\n    <div className=\"wrapper\">\n      <TodoList\n        items={items}\n        onAdd={addTask}\n        onSelect={selectTask}\n        onDelete={deleteTask}\n      />\n      <TodoDetail\n        active={activeItem}\n        onUpdateTask={updateTask}\n        onComplete={completeTask}\n        onDelete={deleteTask}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
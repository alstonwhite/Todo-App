{"ast":null,"code":"import _objectSpread from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { getTasksServer, postTaskServer, updateTaskServer, deleteTaskServer, getTaskServer } from \"./ServerCall\";\n\nconst newTask = () => {\n  return {\n    title: \"New task...\",\n    status: \"new\",\n    body: \"Add notes...\"\n  };\n};\n\nexport function updateTaskItem(items, item, title, body) {\n  let copyOfItem = _objectSpread({}, item);\n\n  if (title !== undefined) {\n    copyOfItem.title = title;\n  }\n\n  if (body !== undefined) {\n    copyOfItem.body = body;\n  }\n\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\n  updateTaskServer(copyOfItem);\n  return [...items];\n}\nexport function addTaskItem(items, callback) {\n  let nextItems = [];\n  postTaskServer(newTask()).then(item => {\n    nextItems = [...items, item];\n    callback(nextItems);\n  }); // return nextItems;\n} // add a callback function\n// reform to async function\n\nexport function deleteTaskItem(items, item) {\n  let nextItems = items.filter(i => i._id !== item._id);\n  deleteTaskServer(item);\n  return nextItems;\n}\nexport function completeTaskItem(items, item) {\n  let copyOfItem = _objectSpread({}, item);\n\n  copyOfItem.status = \"completed\";\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\n  updateTaskServer(copyOfItem);\n  return [...items];\n}","map":{"version":3,"sources":["C:/TodoApp/src/state.js"],"names":["getTasksServer","postTaskServer","updateTaskServer","deleteTaskServer","getTaskServer","newTask","title","status","body","updateTaskItem","items","item","copyOfItem","undefined","findIndex","obj","_id","addTaskItem","callback","nextItems","then","deleteTaskItem","filter","i","completeTaskItem"],"mappings":";AAAA,SACIA,cADJ,EAEIC,cAFJ,EAGIC,gBAHJ,EAIIC,gBAJJ,EAKIC,aALJ,QAMS,cANT;;AAQA,MAAMC,OAAO,GAAG,MAAM;AACpB,SAAO;AACLC,IAAAA,KAAK,EAAE,aADF;AAELC,IAAAA,MAAM,EAAE,KAFH;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD,CAND;;AAQA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCL,KAArC,EAA4CE,IAA5C,EAAkD;AACvD,MAAII,UAAU,qBAAQD,IAAR,CAAd;;AACA,MAAIL,KAAK,KAAKO,SAAd,EAAyB;AACvBD,IAAAA,UAAU,CAACN,KAAX,GAAmBA,KAAnB;AACD;;AACD,MAAIE,IAAI,KAAKK,SAAb,EAAwB;AACtBD,IAAAA,UAAU,CAACJ,IAAX,GAAkBA,IAAlB;AACD;;AACDE,EAAAA,KAAK,CAACA,KAAK,CAACI,SAAN,CAAgBC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYJ,UAAU,CAACI,GAA9C,CAAD,CAAL,GAA4DJ,UAA5D;AACAV,EAAAA,gBAAgB,CAACU,UAAD,CAAhB;AACA,SAAO,CAAC,GAAGF,KAAJ,CAAP;AACD;AAED,OAAO,SAASO,WAAT,CAAqBP,KAArB,EAA4BQ,QAA5B,EAAsC;AAC3C,MAAIC,SAAS,GAAG,EAAhB;AACAlB,EAAAA,cAAc,CAACI,OAAO,EAAR,CAAd,CAA0Be,IAA1B,CAA+BT,IAAI,IAAI;AAACQ,IAAAA,SAAS,GAAG,CAAC,GAAGT,KAAJ,EAAWC,IAAX,CAAZ;AACxCO,IAAAA,QAAQ,CAACC,SAAD,CAAR;AAAoB,GADpB,EAF2C,CAI3C;AACD,C,CACD;AACA;;AAEA,OAAO,SAASE,cAAT,CAAwBX,KAAxB,EAA+BC,IAA/B,EAAqC;AAC1C,MAAIQ,SAAS,GAAGT,KAAK,CAACY,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACP,GAAF,KAAUL,IAAI,CAACK,GAAjC,CAAhB;AACAb,EAAAA,gBAAgB,CAACQ,IAAD,CAAhB;AACA,SAAOQ,SAAP;AACD;AAED,OAAO,SAASK,gBAAT,CAA0Bd,KAA1B,EAAiCC,IAAjC,EAAuC;AAC5C,MAAIC,UAAU,qBAAQD,IAAR,CAAd;;AACAC,EAAAA,UAAU,CAACL,MAAX,GAAoB,WAApB;AACAG,EAAAA,KAAK,CAACA,KAAK,CAACI,SAAN,CAAgBC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYJ,UAAU,CAACI,GAA9C,CAAD,CAAL,GAA4DJ,UAA5D;AACAV,EAAAA,gBAAgB,CAACU,UAAD,CAAhB;AACA,SAAO,CAAC,GAAGF,KAAJ,CAAP;AACD","sourcesContent":["import {\r\n    getTasksServer,\r\n    postTaskServer,\r\n    updateTaskServer,\r\n    deleteTaskServer,\r\n    getTaskServer\r\n  } from \"./ServerCall\";\r\n\r\nconst newTask = () => {\r\n  return {\r\n    title: \"New task...\",\r\n    status: \"new\",\r\n    body: \"Add notes...\"\r\n  };\r\n};\r\n\r\nexport function updateTaskItem(items, item, title, body) {\r\n  let copyOfItem = { ...item };\r\n  if (title !== undefined) {\r\n    copyOfItem.title = title;\r\n  }\r\n  if (body !== undefined) {\r\n    copyOfItem.body = body;\r\n  }\r\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\r\n  updateTaskServer(copyOfItem);\r\n  return [...items];\r\n}\r\n\r\nexport function addTaskItem(items, callback) {\r\n  let nextItems = [];\r\n  postTaskServer(newTask()).then(item => {nextItems = [...items, item];\r\n  callback(nextItems)});\r\n  // return nextItems;\r\n}\r\n// add a callback function\r\n// reform to async function\r\n\r\nexport function deleteTaskItem(items, item) {\r\n  let nextItems = items.filter(i => i._id !== item._id);\r\n  deleteTaskServer(item);\r\n  return nextItems;\r\n}\r\n\r\nexport function completeTaskItem(items, item) {\r\n  let copyOfItem = { ...item };\r\n  copyOfItem.status = \"completed\";\r\n  items[items.findIndex(obj => obj._id === copyOfItem._id)] = copyOfItem;\r\n  updateTaskServer(copyOfItem);\r\n  return [...items];\r\n}"]},"metadata":{},"sourceType":"module"}
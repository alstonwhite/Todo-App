{"ast":null,"code":"import _objectSpread from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\n// import {getTasksServer} from \".../ServerCall\";\nimport { TODO_ADD, TODO_SELECT, TODO_UPDATE, TODO_DELETE, TODO_COMPLETE } from '../actionTypes';\nconst initState = {\n  items: [{\n    id: 1,\n    title: \"New task...\",\n    status: \"new\",\n    body: \"Add notes...\"\n  }],\n  //getTasksServer().then(tasks =>\n  activeItem: [] // todos[0]\n\n}; // needs to be async function w/ await for each case? -- use Thunk\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case TODO_ADD:\n      console.log(\"add redux\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: action.payload.items\n      });\n\n    case TODO_SELECT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeItem: action.payload\n      });\n\n    case TODO_UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: action.payload.items\n      });\n    // return {...state,  updateTaskItem(state.items, state.activeItem, action.payload.title, action.payload.body)};\n\n    case TODO_DELETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: action.payload.items\n      });\n    // return {...state, todos: deleteTaskItem(state.items, state.activeItem)};\n\n    case TODO_COMPLETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: action.payload.items\n      });\n    // return {...state, todos: completeTaskItem(state.items, state.activeItem)};\n\n    default:\n      return state;\n  }\n\n  ;\n}); // alternately (redux toolkit) -- \n// const addTodo = createAction('TODO_ADD')\n// const deleteTodo = createAction('TODO_DELETE')\n// etc\n// const todoList = createReducer(initState, {\n//   [addTodo]: state => ({...state, todos: addTaskItem(state.items)}),\n//   [deleteTodo]: state => ({...state, todos: deleteTaskItem(state.items, state.activeItem)}),\n//   etc\n// })","map":{"version":3,"sources":["C:/TodoApp/src/redux/reducers/reducers.js"],"names":["TODO_ADD","TODO_SELECT","TODO_UPDATE","TODO_DELETE","TODO_COMPLETE","initState","items","id","title","status","body","activeItem","state","action","type","console","log","todos","payload"],"mappings":";AAAA;AACA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,EAA6CC,WAA7C,EAA0DC,aAA1D,QAA+E,gBAA/E;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AACAC,IAAAA,KAAK,EAAE,aADP;AAEAC,IAAAA,MAAM,EAAE,KAFR;AAGAC,IAAAA,IAAI,EAAE;AAHN,GADG,CADO;AAOd;AACAC,EAAAA,UAAU,EAAE,EARE,CASd;;AATc,CAAlB,C,CAYA;;AACA,gBAAe,CAACC,KAAK,GAAGP,SAAT,EAAoBQ,MAApB,KAA+B;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,QAAL;AACIe,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,6CAAWJ,KAAX;AAAkBK,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAAP,CAAeZ;AAAxC;;AACJ,SAAKL,WAAL;AACI,6CAAWW,KAAX;AAAkBD,QAAAA,UAAU,EAAEE,MAAM,CAACK;AAArC;;AACJ,SAAKhB,WAAL;AACI,6CAAWU,KAAX;AAAkBK,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAAP,CAAeZ;AAAxC;AACA;;AACJ,SAAKH,WAAL;AACI,6CAAWS,KAAX;AAAkBK,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAAP,CAAeZ;AAAxC;AACA;;AACJ,SAAKF,aAAL;AACI,6CAAWQ,KAAX;AAAkBK,QAAAA,KAAK,EAAEJ,MAAM,CAACK,OAAP,CAAeZ;AAAxC;AACA;;AACJ;AACI,aAAOM,KAAP;AAhBR;;AAiBC;AACJ,CAnBD,E,CAqBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import {getTasksServer} from \".../ServerCall\";\r\nimport { TODO_ADD, TODO_SELECT, TODO_UPDATE, TODO_DELETE, TODO_COMPLETE } from '../actionTypes';\r\n\r\nconst initState = {\r\n    items: [\r\n        {id: 1, \r\n        title: \"New task...\",\r\n        status: \"new\",\r\n        body: \"Add notes...\"}\r\n    ],\r\n    //getTasksServer().then(tasks =>\r\n    activeItem: []\r\n    // todos[0]\r\n}\r\n\r\n// needs to be async function w/ await for each case? -- use Thunk\r\nexport default (state = initState, action) => {\r\n    switch (action.type){\r\n        case TODO_ADD:\r\n            console.log(\"add redux\");\r\n            return {...state, todos: action.payload.items};\r\n        case TODO_SELECT:\r\n            return {...state, activeItem: action.payload}\r\n        case TODO_UPDATE:\r\n            return {...state, todos: action.payload.items};\r\n            // return {...state,  updateTaskItem(state.items, state.activeItem, action.payload.title, action.payload.body)};\r\n        case TODO_DELETE:\r\n            return {...state, todos: action.payload.items};\r\n            // return {...state, todos: deleteTaskItem(state.items, state.activeItem)};\r\n        case TODO_COMPLETE:\r\n            return {...state, todos: action.payload.items};\r\n            // return {...state, todos: completeTaskItem(state.items, state.activeItem)};\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n// alternately (redux toolkit) -- \r\n// const addTodo = createAction('TODO_ADD')\r\n// const deleteTodo = createAction('TODO_DELETE')\r\n// etc\r\n\r\n// const todoList = createReducer(initState, {\r\n//   [addTodo]: state => ({...state, todos: addTaskItem(state.items)}),\r\n//   [deleteTodo]: state => ({...state, todos: deleteTaskItem(state.items, state.activeItem)}),\r\n//   etc\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}
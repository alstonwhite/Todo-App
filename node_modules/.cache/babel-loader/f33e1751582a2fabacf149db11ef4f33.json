{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:\\\\TodoApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { getTasksServer } from \"../ServerCall\";\nimport { updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem } from '../state';\nconst initState = {\n  todos: [{\n    id: 1,\n    title: \"New task...\",\n    status: \"new\",\n    body: \"Add notes...\"\n  }],\n  //getTasksServer().then(tasks =>\n  activeTodo: [] // todos[0]\n\n};\nconst TODO_ADD = 'TODO_ADD';\nconst TODO_UPDATE = 'TODO_UPDATE';\nconst TODO_DELETE = 'TODO_DELETE';\nconst TODO_COMPLETE = 'TODO_COMPLETE';\nexport function addTask() {\n  return _addTask.apply(this, arguments);\n} //     {\n//     const nextItems = await addTaskItem(items);\n//     setItems(nextItems);\n//   }\n\nfunction _addTask() {\n  _addTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            type: TODO_ADD\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _addTask.apply(this, arguments);\n}\n\nexport function selectTask(item) {\n  setActiveItem(item);\n}\nexport function updateTask(item, title, body) {\n  const nextItems = updateTaskItem(items, item, title, body);\n  setActiveItem(nextItems.find(obj => obj._id === item._id));\n  setItems(nextItems);\n}\nexport function deleteTask(item) {\n  const nextItems = deleteTaskItem(items, item);\n  setItems(nextItems);\n  setActiveItem(nextItems[0]);\n}\nexport function completeTask(item) {\n  const nextItems = completeTaskItem(items, item);\n  setItems(nextItems);\n} // needs to be async function w/ await for each case?\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case TODO_ADD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: addTaskItem(state.todos)\n      });\n    // return {...state, todos: state.todos.concat(newTask)}\n\n    case TODO_UPDATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: updateTaskItem(state.todos, state.activeTodo, action.payload.title, action.payload.body)\n      });\n\n    case TODO_DELETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: deleteTaskItem(state.todos, state.activeTodo)\n      });\n\n    case TODO_COMPLETE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        todos: completeTaskItem(state.todos, state.activeTodo)\n      });\n\n    default:\n      return state;\n  }\n\n  ;\n});","map":{"version":3,"sources":["C:/TodoApp/src/reducers/todo.js"],"names":["getTasksServer","updateTaskItem","addTaskItem","deleteTaskItem","completeTaskItem","initState","todos","id","title","status","body","activeTodo","TODO_ADD","TODO_UPDATE","TODO_DELETE","TODO_COMPLETE","addTask","type","selectTask","item","setActiveItem","updateTask","nextItems","items","find","obj","_id","setItems","deleteTask","completeTask","state","action","payload"],"mappings":";;;AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAAQC,cAAR,EAAwBC,WAAxB,EAAqCC,cAArC,EAAqDC,gBAArD,QAA4E,UAA5E;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE,CACH;AAACC,IAAAA,EAAE,EAAE,CAAL;AACAC,IAAAA,KAAK,EAAE,aADP;AAEAC,IAAAA,MAAM,EAAE,KAFR;AAGAC,IAAAA,IAAI,EAAE;AAHN,GADG,CADO;AAOd;AACAC,EAAAA,UAAU,EAAE,EARE,CASd;;AATc,CAAlB;AAYA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,gBAAsBC,OAAtB;AAAA;AAAA,C,CAGA;AACA;AACA;AACA;;;sEANO;AAAA;AAAA;AAAA;AAAA,2CACI;AAACC,YAAAA,IAAI,EAAEL;AAAP,WADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,OAAO,SAASM,UAAT,CAAoBC,IAApB,EAA0B;AAC7BC,EAAAA,aAAa,CAACD,IAAD,CAAb;AACD;AAEH,OAAO,SAASE,UAAT,CAAoBF,IAApB,EAA0BX,KAA1B,EAAiCE,IAAjC,EAAuC;AAC1C,QAAMY,SAAS,GAAGrB,cAAc,CAACsB,KAAD,EAAQJ,IAAR,EAAcX,KAAd,EAAqBE,IAArB,CAAhC;AACAU,EAAAA,aAAa,CAACE,SAAS,CAACE,IAAV,CAAeC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYP,IAAI,CAACO,GAAvC,CAAD,CAAb;AACAC,EAAAA,QAAQ,CAACL,SAAD,CAAR;AACD;AAEH,OAAO,SAASM,UAAT,CAAoBT,IAApB,EAA0B;AAC7B,QAAMG,SAAS,GAAGnB,cAAc,CAACoB,KAAD,EAAQJ,IAAR,CAAhC;AACAQ,EAAAA,QAAQ,CAACL,SAAD,CAAR;AACAF,EAAAA,aAAa,CAACE,SAAS,CAAC,CAAD,CAAV,CAAb;AACD;AAEH,OAAO,SAASO,YAAT,CAAsBV,IAAtB,EAA4B;AAC/B,QAAMG,SAAS,GAAGlB,gBAAgB,CAACmB,KAAD,EAAQJ,IAAR,CAAlC;AACAQ,EAAAA,QAAQ,CAACL,SAAD,CAAR;AACD,C,CAEH;;AACA,gBAAe,CAACQ,KAAK,GAAGzB,SAAT,EAAoB0B,MAApB,KAA+B;AAC1C,UAAQA,MAAM,CAACd,IAAf;AACI,SAAKL,QAAL;AACI,6CAAWkB,KAAX;AAAkBxB,QAAAA,KAAK,EAAEJ,WAAW,CAAC4B,KAAK,CAACxB,KAAP;AAApC;AACA;;AACJ,SAAKO,WAAL;AACI,6CAAWiB,KAAX;AAAkBxB,QAAAA,KAAK,EAAEL,cAAc,CAAC6B,KAAK,CAACxB,KAAP,EAAcwB,KAAK,CAACnB,UAApB,EAAgCoB,MAAM,CAACC,OAAP,CAAexB,KAA/C,EAAsDuB,MAAM,CAACC,OAAP,CAAetB,IAArE;AAAvC;;AACJ,SAAKI,WAAL;AACI,6CAAWgB,KAAX;AAAkBxB,QAAAA,KAAK,EAAEH,cAAc,CAAC2B,KAAK,CAACxB,KAAP,EAAcwB,KAAK,CAACnB,UAApB;AAAvC;;AACJ,SAAKI,aAAL;AACI,6CAAWe,KAAX;AAAkBxB,QAAAA,KAAK,EAAEF,gBAAgB,CAAC0B,KAAK,CAACxB,KAAP,EAAcwB,KAAK,CAACnB,UAApB;AAAzC;;AACJ;AACI,aAAOmB,KAAP;AAXR;;AAYC;AACJ,CAdD","sourcesContent":["import {getTasksServer} from \"../ServerCall\";\r\nimport {updateTaskItem, addTaskItem, deleteTaskItem, completeTaskItem} from '../state';\r\n\r\nconst initState = {\r\n    todos: [\r\n        {id: 1, \r\n        title: \"New task...\",\r\n        status: \"new\",\r\n        body: \"Add notes...\"}\r\n    ],\r\n    //getTasksServer().then(tasks =>\r\n    activeTodo: []\r\n    // todos[0]\r\n}\r\n\r\nconst TODO_ADD = 'TODO_ADD';\r\nconst TODO_UPDATE = 'TODO_UPDATE';\r\nconst TODO_DELETE = 'TODO_DELETE';\r\nconst TODO_COMPLETE = 'TODO_COMPLETE';\r\n\r\nexport async function addTask() {\r\n    return {type: TODO_ADD};\r\n}\r\n//     {\r\n//     const nextItems = await addTaskItem(items);\r\n//     setItems(nextItems);\r\n//   }\r\n\r\nexport function selectTask(item) {\r\n    setActiveItem(item);\r\n  }\r\n\r\nexport function updateTask(item, title, body) {\r\n    const nextItems = updateTaskItem(items, item, title, body);\r\n    setActiveItem(nextItems.find(obj => obj._id === item._id));\r\n    setItems(nextItems);\r\n  }\r\n\r\nexport function deleteTask(item) {\r\n    const nextItems = deleteTaskItem(items, item);\r\n    setItems(nextItems);\r\n    setActiveItem(nextItems[0]);\r\n  }\r\n\r\nexport function completeTask(item) {\r\n    const nextItems = completeTaskItem(items, item)\r\n    setItems(nextItems);\r\n  }\r\n\r\n// needs to be async function w/ await for each case?\r\nexport default (state = initState, action) => {\r\n    switch (action.type){\r\n        case TODO_ADD:\r\n            return {...state, todos: addTaskItem(state.todos)};\r\n            // return {...state, todos: state.todos.concat(newTask)}\r\n        case TODO_UPDATE:\r\n            return {...state, todos: updateTaskItem(state.todos, state.activeTodo, action.payload.title, action.payload.body)};\r\n        case TODO_DELETE:\r\n            return {...state, todos: deleteTaskItem(state.todos, state.activeTodo)};\r\n        case TODO_COMPLETE:\r\n            return {...state, todos: completeTaskItem(state.todos, state.activeTodo)};\r\n        default:\r\n            return state;\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}